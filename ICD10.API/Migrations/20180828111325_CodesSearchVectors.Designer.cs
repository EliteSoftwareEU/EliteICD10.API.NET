// <auto-generated />
using System;
using ICD10.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;

namespace ICD10.API.Migrations
{
    [DbContext(typeof(ICD10DbContext))]
    [Migration("20180828111325_CodesSearchVectors")]
    partial class CodesSearchVectors
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("ICD10.API.Models.ICD10Category", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD10Code", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AbbreviatedDescription");

                    b.Property<string>("DiagnosisCode");

                    b.Property<string>("FullDescription");

                    b.Property<Guid>("ICD10CategoryId");

                    b.Property<NpgsqlTsVector>("SearchVector");

                    b.HasKey("ID");

                    b.HasIndex("ICD10CategoryId");

                    b.HasIndex("SearchVector")
                        .HasAnnotation("Npgsql:IndexMethod", "GIN");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD10CodeWithMapping", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ICD10CodeId");

                    b.Property<Guid>("ICD9TOICD10MappingId");

                    b.HasKey("ID");

                    b.HasIndex("ICD10CodeId");

                    b.HasIndex("ICD9TOICD10MappingId");

                    b.ToTable("ICD10CodeWithMappings");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD10TOICD9Mapping", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Flags");

                    b.Property<string>("ICD10Code");

                    b.Property<string>("ICD9Code");

                    b.HasKey("ID");

                    b.ToTable("ICD10TOICD9Mappings");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD9Code", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("LongDescription");

                    b.Property<NpgsqlTsVector>("SearchVector");

                    b.Property<string>("ShortDescription");

                    b.Property<int>("Version");

                    b.HasKey("ID");

                    b.HasIndex("SearchVector")
                        .HasAnnotation("Npgsql:IndexMethod", "GIN");

                    b.ToTable("ICD9Codes");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD9CodeWithMapping", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ICD10TOICD9MappingId");

                    b.Property<Guid>("ICD9CodeId");

                    b.HasKey("ID");

                    b.HasIndex("ICD10TOICD9MappingId");

                    b.HasIndex("ICD9CodeId");

                    b.ToTable("ICD9CodeWithMappings");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD9TOICD10Mapping", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Flags");

                    b.Property<string>("ICD10Code");

                    b.Property<string>("ICD9Code");

                    b.HasKey("ID");

                    b.ToTable("ICD9TOICD10Mappings");
                });

            modelBuilder.Entity("ICD10.API.Models.ICD10Code", b =>
                {
                    b.HasOne("ICD10.API.Models.ICD10Category", "Category")
                        .WithMany("ICD10Codes")
                        .HasForeignKey("ICD10CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD10.API.Models.ICD10CodeWithMapping", b =>
                {
                    b.HasOne("ICD10.API.Models.ICD10Code", "ICD10Code")
                        .WithMany()
                        .HasForeignKey("ICD10CodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD10.API.Models.ICD9TOICD10Mapping", "ICD9TOICD10Mapping")
                        .WithMany("ICD10CodeWithMappings")
                        .HasForeignKey("ICD9TOICD10MappingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ICD10.API.Models.ICD9CodeWithMapping", b =>
                {
                    b.HasOne("ICD10.API.Models.ICD10TOICD9Mapping", "ICD10TOICD9Mapping")
                        .WithMany("ICD9CodeWithMappings")
                        .HasForeignKey("ICD10TOICD9MappingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ICD10.API.Models.ICD9Code", "ICD9Code")
                        .WithMany()
                        .HasForeignKey("ICD9CodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
